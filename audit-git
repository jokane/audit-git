#!/usr/bin/env python3

import os
import re
import contextlib
from collections import Counter
import subprocess

exceptions = list()

@contextlib.contextmanager
def temporarily_changed_directory(directory):
    """A context in which the current directory has been changed to the
    given one, which should exist already.  When the context ends, change
    the current directory back."""
    previous_current_directory = os.getcwd()
    os.chdir(directory)
    try:
        yield
    finally:
        os.chdir(previous_current_directory)

def execute(command):
    text = subprocess.check_output(command, shell=True)
    text = text.decode('utf-8')
    return text

def check_repo(directory):
    stats = {}

    try:
        with temporarily_changed_directory(directory):
            for line in execute('git count-objects -v').split('\n'):
                match = re.match('(.*): (.*)', line)
                if match and match.group(1) == 'count':
                    stats['loose objects'] = int(match.group(2))
                if match and match.group(1) == 'in-pack':
                    stats['packed objects'] = int(match.group(2))

            stats['uncommitted changes'] = int(execute('git status -s | wc -l'))
            stats['files'] = int(execute('git ls-files | wc -l'))
            stats['commits'] = int(execute('git rev-list $(git branch --list | grep -v "no branch" | cut -b 3-) -- | sort | uniq | wc -l'))
        return stats

    except subprocess.CalledProcessError as e:
        print(f'Exception scanning {directory}.')
        exceptions.append((directory, e))
        return None

def format_stats(stats):
    return ', '.join([f'{k}:{v}' for k, v in filter(lambda kv: kv[1]>0, stats.items())])


totals = Counter()
for root, dirs, files in os.walk('.'):
    if '.git' not in dirs: continue
    stats = check_repo(root)
    totals += Counter(stats)
    print(f'{root}:', format_stats(stats))
print(f'TOTALS:', format_stats(totals))
    

for (directory, e) in exceptions:
    print(f'Exception in {directory}.')

